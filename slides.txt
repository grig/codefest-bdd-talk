Behavior Driven Development

О себе
  программирую на java, ruby, js
  TDD-маньяк с примерно 2008г


* выбрать пример проекта
  * twitter-клиент
  * клиент для платежной системы
  * реализовать биллинг через FooMoney

* не усыпить аудиторию

К вам приходит начальник и говорит: "слушай, нам надо сделать клиент для твиттера, приступай"
  Достаточно типичная реакция:
    "задача не очень понятная, лучше почитаю хабрахабр"
    "нам нужен фреймворк для твиттер-клиентов"
  План
    1. имплементим клиента для twitter API
    2. имплементим GUI
    3. ???
    4. Profit!
  Что происходит на самом деле
    1. учимся получать ленту статусов для пользователя
    2. реализуем получение статусов в клиенте
    3. реализуем отображение статусов в GUI
    4. учимся постить статусы в твиттер
    ...
  Вертикальные срезы функциональности
  BDD -- это радикальное продолжение этой идеи
    Начинаем что-то делать только когда есть четкий критерий завершения в виде сценария
    Вносим минимальные изменения, чтобы сценарии проходили
    Рефакторим

Пример
  "Как пользователь, я должен уметь посмотреть свою ленту статусов"
  Вопрос: какой самый простой сценарий?
  Сценарий: новый пользователь
    Допустим я зарегистрирован в twitter как "biburat"
    И у меня нет статусов
    Если я запрашиваю свою ленту статусов
    То я должен увидеть пустую ленту с надписью "Здесь ничего нет"

  * скриншот вывода cucumber *
  Вы уже можете запустить тесты, сценарий будет помечен как "pending"
    таким образом можно создавать новые сценарии без опасения поломать билд
  Следующий шаг: реализовать каждый шаг для этого сценария
    Given /я зарегистрирован в twitter как "([^"]*)"/ do
      # todo
    end
    Given /у меня нет статусов/ do
      # todo
    end
    When /я запрашиваю ленту пользователя "([^"]*)"/ do |username|
      get "/#{username}"
    end

  В этот момент скорее всего наше приложение начнет валиться
    мы даже не поднимали никакого веб-сервера
      пускаем его вручную перед каждым запуском тестов
      пускаем автоматически из скриптов
	# features/support/env.rb
	Server.start
	at_exit do
	  Server.stop
	end

  Время заняться обработчиком для "/"!
    # app/controllers/status_controller.rb
    class StatusController < ActionController::Base
      def index
	render :text => ""
      end
    end

    # routes.rb
    map "/" => "status#index"

  Следующий шаг:
    Then /я должен увидеть пустую ленту с надписью "([^"]*)"/ do |text|
      assert_xpath "//div[id='statuses']/[text() = '#{text}']"
    end

  Запустить тесты, починить, повторить.

  Сценарий: пользователь с одним статусом
    Допустим я зарегистрирован в twitter как пользователь "biburat"
    И я добавил статус "zomg добавил твиттер!"
    Если я запрашиваю статусы пользователя "biburat"
    То я должен увидеть такие статусы:
    | статус               |
    | zomg добавил твиттер |

  Надо реализовать шаги, помеченные как #todo
    либо работать с реальным твиттером
      автоматически либо вручную
    либо работать с заглушкой
      нужны тесты на заглушку!
      необязательно cucumber, поскольку интересуют почти только разработчиков.

  Личное предпочтение: заглушки
    Плюсы
      повторяемость
      независимость от сторонних сервисов
      значит, можем запускать тесты чаще, а Это Хорошо (tm)
    Минусы
      расхождение в поведении заглушки и основного сервиса

  Заглушки
    # features/support/env.rb
      Server.start
      Stub.start
      at_exit do
	Stub.stop
	Server.stop
      end

    # features/step_definitions/twitter_steps.rb
    Given /я зарегистрирован в twitter как "([^"]*)"/ do |username|
      @user = Stub.register(username)
    end

    Given /я добавил статус "([^"]*)"/ do |text|
      @user.statuses << text
    end

    Before do
      Stub.reset!
    end

    # features/support/stub.rb
    class Stub
      @users = []
      def self.start
	@server = Server.start
      end
      def self.stop
	@server.stop
      end
      def self.register(name)
	@users << User.new(name)
      end
      class Server; end
      class User; end
    end

  Тесты для заглушек
    Проверить, что API сервиса соответствует API, предоставляемого заглушками
      Одинаковый сетап сервиса и заглушек
      вызываем и то и другое
      Сравниваем результаты
    Изредка запускать, чтобы проверить, что ничего не изменилось

Что такое BDD и почему вы, возможно, уже его изобрели сами
  Типичный процесс разработки
    Собираем требования
    Разрабатываем
    Тестируем (проверяем код на соответствие требованиям)
    Повторить
  Минусы
    позднее обнаружение ошибок
      разработчики допускают тупые ошибки в скриптах
      надо прогнать весь цикл тестирования для обнаружения тривиальных ошибок
  Автоматизация тестирования
    автоматизируем тривиальные тесты
    FIT и тому подобное
    | предусловия | действие | ожидаемый результат | действительный результат |

  Запуск тестов как можно раньше
    раз уж мы написали тесты, почему бы не запускать их как можно раньше?
      например, в процессе разработки
      или даже до начала разработки
	(они, конечно, проходить не будут)
	  если будут -- значит ничего делать не надо
    лишь бы они работали достаточно быстро
  
  Прогресс проекта = % проходящих тестов

  Новый процесс:
    Собираем требования
      = пишем тесты
      выход: набор сценариев
    Разрабатываем + тестируем
    Проводим ручную приемку
    Повторяем

  Можно получить фидбэк еще быстрее:
    Анализируем требование
    Разрабатываем + тестируем
    Проводим приемку
    Повторяем

    количество сценариев обрабатываемых за раз можно выбирать по ситуации

Что такое BDD
  Родом из Test-Driven Development
  TDD Done Right

Что мы обычно делаем, когда начинаем новый проект?
  Обычный проект
    собираем требования
      зачастую в виде use cases / user stories
    анализ
    анализ
    анализ
    архитектура, ТЗ
    разработка
    тестирование
    приемка
    повторить

  


